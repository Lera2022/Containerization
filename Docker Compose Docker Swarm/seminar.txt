docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:8.0.31

********************************
docker-compose.yml

version: '3.9'

services:

  db:
    build:
      dockerfile: Dockerfile
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 12345
    deploy:
      mode: replicated
      replicas: 2

  adminer:
    image: adminer:4.8.1
    restart: always
    ports:
      - 6080:8080
    volumes:
      - /home/salerat/dumps:/dumps
    deploy:
      mode: replicated
      replicas: 1
***********************************************

Dockerfile1

FROM mariadb:10.10.2

RUN mkdir /test


docker ps
docker run --name mymphp -d --link some-mysql:db -p 8081:80 phpmyadmin/phpmyadmin
docker ps
docker stop <>
docker stop <>
cd var/www/gb/docker/5/mariadb
ls -l
cat docker-compose.yml
cat Dockerfile1
docker compose up -d

****************************
docker-compose.yml

version: '3'

services:
  db:
    image: mysql:8.0
    container_name: db
    restart: unless-stopped
    env_file: .env
    environment:
      - MYSQL_DATABASE=wordpress
    volumes:
      - dbdata:/var/lib/mysql
    command: '--default-authentication-plugin=mysql_native_password'
    networks:
      - app-network

  wordpress:
    depends_on:
      - db
    image: wordpress:6.0.1.-php8.0-fpm-alpine
    container_name: wordpress
    restart: unless-stopped
    env_file: .env_file
    environment:
      - WORDPRESS_DB_HOSTS=db:3306
      - WORDPRESS_DB_USER=$MYSQL_PASSWORD
      - WORDPRESS_DB_NAME=wordpress
    volumes:
      - wordpress:/var/www/html
    networks:
      - app-network
      - app-network2

  webserver:
    depends_on:
      - wordpress
    image: nginx:1.22.0-alpine
    container_name: Webserver
    restart: unless-stopped
    ports:
      - "80.80"
    volumes:
      - wordpress:/var/www/html
      - ./nginx-conf:/etc/nginx/conf.d
    networks:
      - app-network2
volumes:
  wordpress:
  dbdata:

networks:
  app-network:
    driver: bridge
  app-network2:
    driver: bridge
*****************************************

docker ps

docker swarm init
docker ps
docker node ls
docker node update --label-add env=prod <>
docker service create --name nginx --label env=prod --replicas 3 nginx:alpine;


docker network create --driver overlay --subnet 4.5.6.0/24 test-network --attachable
docker run -d --ip 4.5.6.7 --net test-network --name container-1 busybox sleep 3600
docker run -d --ip 4.5.6.8 --net test-network --name container-2 busybox sleep 3600
docker exec -it container-1 sh
/ # ping 4.5.6.7
/ # exit
